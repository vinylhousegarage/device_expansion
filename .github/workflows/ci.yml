name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:14.13
        env:
          TEST_DB: ${{ secrets.TEST_DB }}
          TEST_USER: ${{ secrets.TEST_USER }}
          TEST_PASSWORD: ${{ secrets.TEST_PASSWORD }}
          TEST_HOST: ${{ secrets.TEST_HOST }}
        options: >-
          --health-cmd "pg_isready -U ${{ secrets.TEST_USER }} -h ${{ secrets.TEST_HOST }} || (echo 'PostgreSQL is not ready' && exit 1)" \
          --timeout=10 \
          --dbname=${{ secrets.TEST_DB }} \
          --health-interval 10s \
          --health-timeout 5s \
          --health-retries 10

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1.0

      - name: Cache gems
        uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
            ${{ runner.os }}--gems

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev
          bundle config set path 'vendor/bundle'
          bundle install --jobs 4 --retry 3

      - name: Set up the database
        run: |
          if psql -h ${{ secrets.TEST_HOST }} \
          -U ${{ secrets.TEST_USER }} -lqt \
          | cut -d \| -f 1 \
          | grep -qw ${{ secrets.TEST_DB }}; then
            echo "Database exist, running migrations"
            RAILS_ENV=test bundle exec rails db:migrate
          else
            echo "Database does not exist, creating database"
            RAILS_ENV=test bundle exec rails db:create
            echo "Running migrations"
            RAILS_ENV=test bundle exec rails db:migrate
            echo "Inserting seed data"
            RAILS_ENV=test bundle exec rails db:seed
          fi

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Determine Docker tag
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            TAG="latest"
          else
            TAG="${{ github.sha }}"
          fi
          echo "TAG=${TAG}" >> $GITHUB_ENV

      - name: Check if Dockerfile or related files changed
        run: |
          if git diff --name-only HEAD~1 | grep -E "Dockerfile|path/to/other/related/files"; then
            docker build -t ghcr.io/vinylhousegarage/device_expansion:${{ env.TAG }} .
            docker push ghcr.io/vinylhousegarage/device_expansion:${{ env.TAG }}
          else
            echo "No changes in Dockerfile, skipping build and push."
          fi

      - name: Run tests
        run: |
          RAILS_ENV=test bundle exec rails test

      - name: Run RuboCop (Lint check)
        run: |
          bundle exec rubocop --fail-level W

  deploy:
    runs-on: ubuntu-latest
    needs: build
    env:
      RAILS_ENV: production

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Trigger Render Deployment
        run: |
          curl -X POST -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{"clearCache":false}' \
          https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys

      - name: Run migration on Render
        run: |
          curl -X POST -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{"command": "rails db:migrate"}' \
          https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/ssh

      - name: Run seed on Render
        run: |
          curl -X POST -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{"command": "rails db:seed"}' \
          https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/ssh
