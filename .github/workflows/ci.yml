name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      # リモートリポジトリをチェックアウト
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 実行中のユーザーを確認
      - name: Check current user
        run: whoami

      # ls -ld コマンドを実行して、ディレクトリの所有者とパーミッションを確認
      - name: Check directory permissions and ownership
        run: ls -ld /home/runner/work/device_expansion/device_expansion

      # ディレクトリ内のパーミッションの確認
      - name: Check permissions of all files
        run: ls -lR /home/runner/work/device_expansion/device_expansion

      # GHCR にログイン
      - name: Log in to GitHub Container Registry
        run: |
          echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # GHCRから既存のDockerイメージをプルしてキャッシュとして使用
      - name: Pull Docker image from GHCR
        run: docker pull ghcr.io/vinylhousegarage/device_expansion:latest || echo "No cached image found, continuing with fresh build"

      # 稼働中のコンテナのイメージIDを取得
      - name: Get running container image ID
        run: |
          docker ps --format "{{.Image}}" > running_image.txt

      # GHCRのイメージハッシュを取得
      - name: Get GHCR image hash
        run: |
          docker inspect --format='{{index .RepoDigests 0}}' ghcr.io/vinylhousegarage/device_expansion:latest > ghcr_image.txt

      # イメージIDとハッシュの比較
      - name: Compare image hashes
        run: |
          running_image_id=$(cat running_image.txt)
          ghcr_image_hash=$(cat ghcr_image.txt)
          if [ "$running_image_id" == "$ghcr_image_hash" ]; then
            echo "Running container uses the same image as GHCR"
            exit 0
          else
            echo "Running container uses a different image from GHCR"
          fi

      # Dockerイメージをビルド＆プッシュ
      - name: Build and push Docker image if different
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          docker build -t ghcr.io/vinylhousegarage/device_expansion:$COMMIT_HASH .
          docker push ghcr.io/vinylhousegarage/device_expansion:$COMMIT_HASH
          docker tag ghcr.io/vinylhousegarage/device_expansion:$COMMIT_HASH ghcr.io/vinylhousegarage/device_expansion:latest
          docker push ghcr.io/vinylhousegarage/device_expansion:latest

      # Ruby をセットアップ
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1.0

      # Gem のキャッシュを利用してビルドを高速化
      - name: Cache gems
        uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}-v1
          restore-keys: |
            ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}-v1
            ${{ runner.os }}-gems-v1

      # PostgreSQL 関連のライブラリと gem をインストール
      - name: Install dependencies
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y libpq-dev
          bundle config set path 'vendor/bundle'
          bundle install --jobs 4 --retry 3

      # RuboCop を実行してコードスタイルを検証
      - name: Run RuboCop (Lint check)
        run: bundle exec rubocop --config .rubocop.yml --fail-level W

      # PostgreSQL と postgresql-client を 14 でインストール
      - name: Install PostgreSQL 14 and client tools
        run: |
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo apt-get update
          sudo apt-get install -y postgresql-14 postgresql-client-14
          sudo service postgresql start

      # 最大60秒間 PostgreSQL の応答を確認
      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..12}; do
            if pg_isready -h localhost -p 5432; then
              echo "PostgreSQL is ready!"
              exit 0
            fi
            echo "Waiting for PostgreSQL to be ready... Attempt $i at $(date)"
            sleep 5
          done
          echo "PostgreSQL did not become ready in time."
          exit 1

      # ユーザーロールをセットアップ
      - name: Set up pg_role
        run: |
          if ! sudo -u postgres psql -tc "SELECT 1 FROM pg_roles WHERE rolname='${{ secrets.POSTGRES_USER }}'" | grep -q 1; then
            sudo -u postgres psql -c "CREATE USER ${{ secrets.POSTGRES_USER }} WITH PASSWORD '${{ secrets.POSTGRES_PASSWORD }}';" || exit 1
          fi

      # スーパーユーザー権限を付与
      - name: Grant superuser privileges to the PostgreSQL user
        run: |
          if ! sudo -u postgres psql -tc "SELECT rolsuper FROM pg_roles WHERE rolname = '${{ secrets.POSTGRES_USER }}' AND rolsuper = 't'" | grep -q 1; then
            sudo -u postgres psql -c "ALTER USER ${{ secrets.POSTGRES_USER }} WITH SUPERUSER;" || exit 1
          fi

      # データベースの有無を確認
      - name: List all databases with expanded output
        run: |
          echo "Listing all databases in expanded mode:"
          sudo -u postgres psql -c "\l"

      # デーベースの名前を確認
      - name: List all database names
        run: |
          echo "Listing all database names in PostgreSQL:"
          sudo -u postgres psql -c "SELECT datname FROM pg_database;"

      # POSTGRES_DB を生成
      - name: Run database create
        env:
          TEST_DB: postgres_db
          TEST_USER: ${{ secrets.POSTGRES_USER }}
          TEST_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: bundle exec rails db:create RAILS_ENV=test

      # POSTGRES_DB の生成を確認
      - name: List all databases with expanded output
        run: |
          echo "Listing all databases in expanded mode:"
          sudo -u postgres psql -c "\l"

      # POSTGRES_DB をマイグレート
      - name: Run database migrations
        env:
          TEST_DB: postgres_db
          TEST_USER: ${{ secrets.POSTGRES_USER }}
          TEST_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: bundle exec rails db:migrate RAILS_ENV=test

      # マイグレーション履歴を確認
      - name: Check applied migrations
        run: |
          echo "Checking applied migrations..."
          sudo -u postgres psql -d postgres_db -c "SELECT * FROM schema_migrations;"

      # マイグレートした POSTGRES_DB に初期データを挿入
      - name: Run Seed the test database
        env:
          TEST_DB: postgres_db
          TEST_USER: ${{ secrets.POSTGRES_USER }}
          TEST_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: bundle exec rails db:seed RAILS_ENV=test

      # 初期データ挿入の成否を確認
      - name: Check if seed data was inserted
        run: |
          echo "Checking if users are inserted into the test database..."
          user_count=$(sudo -u postgres psql -d postgres_db -tAc "SELECT COUNT(*) FROM users;")
          if [ "$user_count" -eq 0 ]; then
            echo "Error: No users found in the test database. Seed data was not inserted correctly."
            exit 1
          else
            echo "Seed data successfully inserted: $user_count users found."
          fi

      # bin/rails への実行権限を付与
      - name: Grant execute permission to bin/rails
        run: chmod +x bin/rails

      # ルーティングを確認
      - name: Run Rails routes to check routing
        env:
          RAILS_ENV: test
        run: bin/rails routes

      # テストを実行
      - name: Run tests
        env:
          TEST_DB: postgres_db
          TEST_USER: ${{ secrets.POSTGRES_USER }}
          TEST_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          RAILS_ENV: test
        run: bundle exec rails test

  deploy:
    runs-on: ubuntu-latest
    needs: build
    env:
      RAILS_ENV: production

    steps:
      # リモートリポジトリをチェックアウト
      - name: Check out the repository
        uses: actions/checkout@v3

      # Render API へデプロイ
      # Render API からのレスポンスを確認
      - name: Trigger Render Deployment
        run: |
          set -e
          POST_RESPONSE=$(curl -X POST \
          --verbose \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{"clearCache": "clear"}' \
          https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys --fail --show-error)

          if [[ -z "$POST_RESPONSE" ]]; then
            echo "Failed to trigger deployment for service ID: ${{ secrets.RENDER_SERVICE_ID }}"
            exit 1
          else
            echo "Deployment POST response:$POST_RESPONSE"
          fi

      # 最大180回の反復を設定
      # Render API からデプロイ情報を取得
      # 変数GET_DEPROY_RESPONSE が空ではないか確認
      # レスポンス全体を表示してデバッグ情報を確認
      # 最新のデプロイ情報を取得
      # 変数LATEST_DEPLOY が空ではないか確認
      # デプロイID を取得
      # 変数RENDER_DEPLOY_ID が空ではないか確認
      # 変数RENDER_DEPLOY_ID を GITHUB_ENV に格納
      # デプロイステータスを取得
      # 変数RENDER_DEPLOY_STATUS が空でないか確認
      # ステータスを判定
      # 10秒待機しステータスの判定を反復
      - name: Check Render Deployment Status
        run: |
          set -e

          for i in {1..180}; do

            GET_DEPLOY_RESPONSE=$(curl -X GET \
            "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" --fail --show-error)

            if [[ -z "$GET_DEPLOY_RESPONSE" ]]; then
              echo "Failed to retrieve deployment information"
              exit 1
            fi

            echo "$GET_DEPLOY_RESPONSE" | jq '.'

            LATEST_DEPLOY=$(echo "$GET_DEPLOY_RESPONSE" | jq -r 'map(.deploy) | sort_by(.createdAt) | last')

            if [[ -z "$LATEST_DEPLOY" ]]; then
              echo "Failed to retrieve the latest deploy"
              exit 1
            fi

            RENDER_DEPLOY_ID=$(echo "$LATEST_DEPLOY" | jq -r '.id')
            if [[ -z "$RENDER_DEPLOY_ID" ]]; then
              echo "Failed to extract deployment details"
              exit 1
            else
              echo "Render Deploy ID: $RENDER_DEPLOY_ID"
              echo "Waiting for Render Deploy to complete... (attempt $i/180)"
              echo "RENDER_DEPLOY_ID=$RENDER_DEPLOY_ID" >> $GITHUB_ENV
            fi

            RENDER_DEPLOY_STATUS=$(echo "$LATEST_DEPLOY" | jq -r '.status')
            if [[ -z "$RENDER_DEPLOY_STATUS" ]]; then
              echo "Failed to retrieve deployment status"
              exit 1
            elif [[ "$RENDER_DEPLOY_STATUS" == "build_failed" ]]; then
              echo "Deployment build_failed!"
              exit 1
            elif [[ "$RENDER_DEPLOY_STATUS" == "update_failed" ]]; then
              echo "Deployment update_failed!"
              exit 1
            elif [[ "$RENDER_DEPLOY_STATUS" == "canceled" ]]; then
              echo "Deployment canceled!"
              exit 1
            elif [[ "$RENDER_DEPLOY_STATUS" == "live" ]]; then
              echo "Deployment live!"
              exit 0
            fi

            sleep 10
          done

          echo "Deployment is still in progress after 30 minutes. Exiting."
          echo "Final Deployment Status: $RENDER_DEPLOY_STATUS"
          exit 1
