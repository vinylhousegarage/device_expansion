name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:14.13
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432

    steps:
      # リモートリポジトリをチェックアウト
      - name: Check out the repository
        uses: actions/checkout@v3

      # Ruby をセットアップ
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1.0

      # ビルド時間を短縮するため、vendor/bundle に gem をキャッシュしインストール
      - name: Cache gems
        uses: actions/cache@v3
        with:
          path: vendor/bundle
      # Gemfile.lock を基に gem のキャッシュを利用し、次回のビルドでインストール時間を短縮
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}-v1
          restore-keys: |
            ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}-v1
            ${{ runner.os }}-gems-v1

      # PostgreSQL の応答確認
      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h db -p 5432; do
            echo "Waiting for PostgreSQL..."
            sleep 1
          done
          echo "PostgreSQL is ready"

      # libpq-dev のインストール
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev
          bundle config set path 'vendor/bundle'
          bundle install --jobs 4 --retry 3

      # リントチェック
      - name: Run RuboCop (Lint check)
        run: bundle exec rubocop --fail-level W

      # dbコンテナ内に POSTGRES_DB を生成
      - name: Run Create database
        run: bundle exec rails db:create RAILS_ENV=test

      # dbコンテナ内の POSTGRES_DB をマイグレート
      - name: Run database migrations
        run: bundle exec rails db:migrate RAILS_ENV=test

      # マイグレートした POSTGRES_DB に初期データを挿入
      - name: Run Seed the test database
        run: bundle exec rails db:seed RAILS_ENV=test

      # テストを実行
      - name: Run tests
        run: bundle exec rails test RAILS_ENV=test

      # GHCR にログイン
      - name: Log in to GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # CI 環境での Git インストール確認
      - name: Ensure Git is installed
        run: |
          if ! command -v git &> /dev/null; then
            echo "Error: Git is not installed."
            exit 1
          fi

      # Git repository の存在確認
      - name: Ensure the directory is a Git repository
        run: |
          if [ ! -d ".git" ]; then
            echo "Error: This is not a Git repository."
            exit 1
          fi

      # 書き込み権限確認
      - name: Check write permission for commit_list.txt
        run: |
          touch commit_list.txt || { echo "Failed to create commit_list.txt due to insufficient permissions"; exit 1; }

      # Dockerイメージ に差分があったコミットの抽出
      - name: Get commits with Dockerfile or compose.yaml changes
        run: |
          git log --pretty=format:"%H" --name-only | grep -E "(Dockerfile|compose.yaml)" -B 1 | grep -E "^[a-f0-9]{40}$" > commit_list.txt
          if [ ! -s commit_list.txt ]; then
            echo "No commits with Dockerfile or compose.yaml changes found."
            exit 0
          fi

      # 差分がある Dockerイメージ を GHCR にビルドしてプッシュ
      - name: Process each commit
        run: |
          echo "Commits to process: $(cat commit_list.txt)"
          while IFS= read -r COMMIT; do
            echo "Processing commit: $COMMIT"
            if git diff --name-only $COMMIT^ $COMMIT | grep -E "(Dockerfile|compose.yaml)"; then
              echo "Changes detected in $COMMIT, proceeding with build and push."
              docker build -t ghcr.io/vinylhousegarage/device_expansion:$COMMIT .
              docker push ghcr.io/vinylhousegarage/device_expansion:$COMMIT
            else
              echo "No changes in $COMMIT, skipping build and push."
            fi
          done < commit_list.txt

      # コミットに紐づいた Dockerイメージ の最新イメージに latest のタグを付ける
      - name: Tag the latest commit as "latest"
        run: |
          LATEST_COMMIT=$(git rev-parse HEAD)
          echo "Tagging $LATEST_COMMIT as latest"
          docker tag ghcr.io/vinylhousegarage/device_expansion:$LATEST_COMMIT ghcr.io/vinylhousegarage/device_expansion:latest
          docker push ghcr.io/vinylhousegarage/device_expansion:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    env:
      RAILS_ENV: production

    steps:
      # リモートリポジトリをチェック
      - name: Check out the repository
        uses: actions/checkout@v3

      # mainブランチへのマージをトリガーとして Render API へデプロイ
      - name: Trigger Render Deployment
        run: |
          set -e
      # デプロイキャッシュはクリアしない設定
          RESPONSE=$(curl -X POST \
          --verbose \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{"clearCache":false}' \
          https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys --fail --show-error)

      # レスポンスを確認
          echo "Response: $RESPONSE"

      # デプロイに失敗した場合のエラーハンドリング
          if [[ -z "$RESPONSE" ]]; then
            echo "Failed to trigger deployment"
            exit 1
          fi

      # jqをインストール
      - name: Install jq
        run: sudo apt-get install -y jq

      # Render API からデプロイ情報のレスポンスを取得
      - name: Get latest Render Deploy ID and Status
        run: |
          set -e
          RESPONSE=$(curl -X GET \
          --verbose \
          "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" --fail --show-error)

        # 取得したデプロイ情報から最新のデプロイレコードを抽出
          LATEST_DEPLOY=$(echo "$RESPONSE" | jq -r '. | sort_by(.createdAt) | last')
          if [[ -z "$LATEST_DEPLOY" ]]; then
            echo "Failed to retrieve the latest deploy"
            exit 1
          fi

        # 最新のデプロイIDを RENDER_DEPLOY_ID に代入し、ステータスを STATUS に代入
          RENDER_DEPLOY_ID=$(echo "$LATEST_DEPLOY" | jq -r '.id')
          STATUS=$(echo "$LATEST_DEPLOY" | jq -r '.status')

        # RENDER_DEPLOY_ID の空チェック
          if [[ -z "$RENDER_DEPLOY_ID" ]]; then
            echo "Failed to extract deployment details"
            exit 1
          fi

        # RENDER_DEPLOY_ID を GITHUB_ENV で管理
          echo "RENDER_DEPLOY_ID=$RENDER_DEPLOY_ID" >> $GITHUB_ENV

        # STATUS で成否確認
          if [[ "$STATUS" != "succeeded" ]]; then
            echo "Deployment failed with status: $STATUS"
            exit 1
          else
            echo "Deployment succeeded with status: $STATUS"
          fi

      # Render の PostgreSQL をマイグレート
      - name: Run migration on Render
        run: |
          set -e
          curl -X POST \
          --verbose \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{"command": "rails db:migrate"}' \
          https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/ssh --fail --show-error

      # Render の PostgreSQL に初期データを挿入
      - name: Run seed on Render
        run: |
          set -e
          curl -X POST \
          --verbose \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{"command": "rails db:seed"}' \
          https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/ssh --fail --show-error

      # 最新デプロイのログを取得
      - name: Log Render Deploy ID & Get Logs
        run: |
          set -e
          if [[ -z "$RENDER_DEPLOY_ID" ]]; then
            echo "Failed to retrieve Render Deploy ID. Deployment may not have been triggered correctly."
            exit 1
          else
            echo "Render Deploy ID: $RENDER_DEPLOY_ID"
            curl -X GET \
            --verbose \
            "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys/$RENDER_DEPLOY_ID/logs" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" --fail --show-error
          fi
