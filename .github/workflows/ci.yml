name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      TEST_DB: postgres_db
      TEST_USER: ${{ secrets.POSTGRES_USER }}
      TEST_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      RAILS_ENV: test
    timeout-minutes: 30

    steps:
      # リモートリポジトリをチェックアウト
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Ruby をセットアップ
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1.0

      # Gem のキャッシュを利用してビルドを高速化
      - name: Cache gems
        uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}-v1
          restore-keys: |
            ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}-v1
            ${{ runner.os }}-gems-v1

      # PostgreSQL 関連のライブラリと gem をインストール
      - name: Install dependencies
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y libpq-dev || echo "Failed to install libpq-dev"
          bundle config set path 'vendor/bundle'
          bundle install --jobs 4 --retry 3

      # RuboCop を実行してコードスタイルを検証
      - name: Run RuboCop (Lint check)
        run: bundle exec rubocop --config .rubocop.yml --fail-level W

      # PostgreSQL と postgresql-client を 14 でインストール
      - name: Install PostgreSQL 14 and client tools
        run: |
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo apt-get update
          sudo apt-get install -y postgresql-14 postgresql-client-14
          sudo service postgresql start

      # 最大60秒間 PostgreSQL の応答を確認
      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..12}; do
            if pg_isready -h localhost -p 5432; then
              echo "PostgreSQL is ready!"
              exit 0
            fi
            echo "Waiting for PostgreSQL to be ready... Attempt $i at $(date)"
            sleep 5
          done
          echo "PostgreSQL did not become ready in time."
          exit 1

      # ユーザーロールをセットアップ
      - name: Set up pg_role
        run: |
          if ! sudo -u postgres psql -tc "SELECT 1 FROM pg_roles WHERE rolname='${{ secrets.POSTGRES_USER }}'" | grep -q 1; then
            sudo -u postgres psql -c "CREATE USER ${{ secrets.POSTGRES_USER }} WITH PASSWORD '${{ secrets.POSTGRES_PASSWORD }}';" || exit 1
          fi

      # スーパーユーザー権限を付与
      - name: Grant superuser privileges to the PostgreSQL user
        run: |
          if ! sudo -u postgres psql -tc "SELECT rolsuper FROM pg_roles WHERE rolname = '${{ secrets.POSTGRES_USER }}' AND rolsuper = 't'" | grep -q 1; then
            sudo -u postgres psql -c "ALTER USER ${{ secrets.POSTGRES_USER }} WITH SUPERUSER;" || exit 1
          fi

      # データベースの有無を確認
      - name: List all databases with expanded output
        run: |
          echo "Listing all databases in expanded mode:"
          sudo -u postgres psql -c "\l"

      # デーベースの名前を確認
      - name: List all database names
        run: |
          echo "Listing all database names in PostgreSQL:"
          sudo -u postgres psql -c "SELECT datname FROM pg_database;"

      # POSTGRES_DB を生成
      - name: Run database create
        run: bundle exec rails db:create

      # POSTGRES_DB の生成を確認
      - name: List all databases with expanded output
        run: |
          echo "Listing all databases in expanded mode:"
          sudo -u postgres psql -c "\l"

      # POSTGRES_DB をマイグレート
      - name: Run database migrations
        run: bundle exec rails db:migrate

      # マイグレーション履歴を確認
      - name: Check applied migrations
        run: |
          echo "Checking applied migrations..."
          sudo -u postgres psql -d postgres_db -c "SELECT * FROM schema_migrations;"

      # マイグレートした POSTGRES_DB に初期データを挿入
      - name: Run Seed the test database
        run: bundle exec rails db:seed:replant

      # 初期データ挿入の成否を確認
      - name: Check if seed data was inserted
        run: |
          echo "Checking if users are inserted into the test database..."
          user_count=$(sudo -u postgres psql -d postgres_db -tAc "SELECT COUNT(*) FROM users;")
          if [ "$user_count" -eq 0 ]; then
            echo "Error: No users found in the test database. Seed data was not inserted correctly."
            exit 1
          else
            echo "Seed data successfully inserted: $user_count users found."
          fi

      # ルーティングを確認
      - name: Run Rails routes to check routing
        run: bundle exec rails routes

      # アセットをプリコンパイル
      - name: Precompile assets
        run: bundle exec rails assets:precompile

      # テストを実行
      - name: Run tests
        run: bundle exec rails test

  build:
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 30

    steps:
      # リモートリポジトリをチェックアウト
      - name: Check out the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 実行権限を付与
      - name: Add Permissions
        run: chmod +x bin/rails

      # Dockerイメージをビルド
      - name: Build Docker Image with Compose
        run: docker compose build

      # Dockerイメージ一覧を表示
      - name: List Docker Images
        run: docker images

      # GHCR にログイン
      - name: Log in to GitHub Container Registry
        run: |
          echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # GHCRから最新のイメージをプル
      - name: Pull latest image from GHCR
        run: docker pull ghcr.io/vinylhousegarage/device_expansion:latest || echo "No cached image found."

      # Dockerイメージと GHCRからプルしたイメージのハッシュを比較
      # 差分があれ ばDockerイメージを GHCR にプッシュ
      - name: Compare and Push Docker Image if Different
        run: |
          temp_hash=$(docker inspect --format='{{.Id}}' device_expansion-development)
          ghcr_hash=$(docker inspect --format='{{.Id}}' ghcr.io/vinylhousegarage/device_expansion:latest || echo "")

          echo "Temp Image Hash: $temp_hash"
          echo "GHCR Image Hash: $ghcr_hash"

          if [ "$temp_hash" != "$ghcr_hash" ]; then
            echo "Images differ. Proceeding to tag and push."
            docker tag device_expansion-web ghcr.io/vinylhousegarage/device_expansion:latest
            docker push ghcr.io/vinylhousegarage/device_expansion:latest
          else
            echo "Images are identical. No push needed."
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: [test, build]
    env:
      RAILS_ENV: production

    steps:
      # リモートリポジトリをチェックアウト
      - name: Check out the repository
        uses: actions/checkout@v3

      # Render API へデプロイ
      # ステータスコードを判定
      - name: Trigger Render Deployment
        run: |
          set -e
          POST_RESPONSE=$(curl -s -o response.json -w "%{http_code}" \
            -X POST \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": "clear"}' \
            https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys)

          if [[ "$POST_RESPONSE" != "201" ]]; then
            echo "Failed to trigger deployment (status: $POST_RESPONSE)"
            exit 1
          fi

          echo "Deployment triggered successfully!"
