name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1.0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Cache gems
        uses: actions/cache@v3
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
            ${{ runner.os }}--gems
            ${{ runner.os }}-

      - name: Install dependencies
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y libpq-dev
          bundle config set path 'vendor/bundle'
          bundle install --jobs 4 --retry 3

      - name: Install PostgreSQL
        run: sudo apt-get install -y postgresql-14

      - name: Start PostgreSQL and wait
        run: |
          sudo service postgresql start
          sleep 10

      - name: Update pg_hba.conf for md5 authentication
        run: |
          sudo sed -i "s/peer/md5/g" /etc/postgresql/14/main/pg_hba.conf
          sudo sed -i "s/ident/md5/g" /etc/postgresql/14/main/pg_hba.conf
          sudo service postgresql restart

      - name: Set up PostgreSQL user password
        run: |
          PGPASSWORD=${{ secrets.POSTGRES_PASSWORD }} psql \
          -h localhost -U postgres \
          -c "ALTER USER postgres WITH PASSWORD '${{ secrets.POSTGRES_PASSWORD }}';"

      - name: Set up the test database
        run: |
          psql -c "SELECT 'CREATE DATABASE ${{ secrets.POSTGRES_DB }}' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '${{ secrets.POSTGRES_DB }}');" -U postgres
          psql -c "CREATE USER ${{ secrets.POSTGRES_USER }} WITH PASSWORD '${{ secrets.POSTGRES_PASSWORD }}';" -U postgres
          psql -c "GRANT ALL PRIVILEGES ON DATABASE ${{ secrets.POSTGRES_DB }} TO ${{ secrets.POSTGRES_USER }};" -U postgres

      - name: Run database migrations
        run: bundle exec rails db:migrate RAILS_ENV=test

      - name: Seed the test database
        run: bundle exec rails db:seed RAILS_ENV=test

      - name: Run tests
        run: bundle exec rails test RAILS_ENV=test

      - name: Log in to GitHub Container Registry
        run: |
          set -e
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          echo "Docker login successful"

      - name: Determine Docker tag
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            TAG="latest"
          else
            TAG="${{ github.sha }}"
          fi

          if [[ -z "${TAG}" ]]; then
            echo "Failed to determine Docker tag"
            exit 1
          fi

          echo "TAG=${TAG}" >> $GITHUB_ENV
          echo "Docker tag set to: ${TAG}"

      - name: Check if Dockerfile or related files changed
        run: |
          set -e
          if [[ -z ${TAG} ]]; then
            echo "TAG is not set, exiting."
            exit 1
          else
            if git diff --name-only origin/main...HEAD | grep -E "(Dockerfile|compose.yaml)"; then
              docker build -t ghcr.io/vinylhousegarage/device_expansion:$TAG .
              docker push ghcr.io/vinylhousegarage/device_expansion:$TAG
            else
              echo "No changes in Dockerfile, skipping build and push."
            fi
          fi

      - name: Run RuboCop (Lint check)
        run: |
          bundle exec rubocop --fail-level W

  deploy:
    runs-on: ubuntu-latest
    needs: build
    env:
      RAILS_ENV: production

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Trigger Render Deployment
        run: |
          set -e
          RESPONSE=$(curl -X POST \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{"clearCache":false}' \
          https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys --fail --show-error)

          if [[ -z "$RESPONSE" ]]; then
            echo "Failed to trigger deployment"
            exit 1
          fi

      - name: Get latest Render Deploy ID and Status
        run: |
          set -e
          RESPONSE=$(curl -X GET \
          "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" --fail --show-error)

          LATEST_DEPLOY=$(echo $RESPONSE | jq -r '. | sort_by(.createdAt) | last')
          if [[ -z "LATEST_DEPLOY" ]]; then
            echo "Failed to retrieve the latest deploy"
            exit 1
          fi

          RENDER_DEPLOY_ID=$(echo $LATEST_DEPLOY | jq -r '.id')
          STATUS=$(echo $LATEST_DEPLOY | jq -r '.status')

          if [[ -z "RENDER_DEPLOY_ID" ]]; then
            echo "Failed to extract deployment details"
            exit 1
          fi

          echo "RENDER_DEPLOY_ID=$RENDER_DEPLOY_ID" >> $GITHUB_ENV

          if [[ "$STATUS" != "succeeded" ]]; then
            echo "Deployment failed with status: $STATUS"
            exit 1
          else
            echo "Deployment succeeded"
          fi

      - name: Run migration on Render
        run: |
          set -e
          curl -X POST \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{"command": "rails db:migrate"}' \
          https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/ssh --fail --show-error

      - name: Run seed on Render
        run: |
          set -e
          curl -X POST \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{"command": "rails db:seed"}' \
          https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/ssh --fail --show-error

      - name: Log Render Deploy ID & Get Logs
        run: |
          set -e
          if [[ -z "$RENDER_DEPLOY_ID" ]]; then
            echo "Failed to retrieve Render Deploy ID. Deployment may not have been triggered correctly."
            exit 1
          else
            echo "Render Deploy ID: $RENDER_DEPLOY_ID"
            curl -X GET \
            "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys/$RENDER_DEPLOY_ID/logs" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" --fail --show-error
          fi
