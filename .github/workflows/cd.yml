name: CD

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      RAILS_ENV: production

    steps:
      # リモートリポジトリをチェックアウト
      - name: Check out the repository
        uses: actions/checkout@v3

      # Render API へデプロイ
      # Render API からのレスポンスを確認
      - name: Trigger Render Deployment
        run: |
          set -e
          POST_RESPONSE=$(curl -X POST \
          --verbose \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{"clearCache": true}' \
          https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys --fail --show-error)

          if [[ -z "$POST_RESPONSE" ]]; then
            echo "Failed to trigger deployment for service ID: ${{ secrets.RENDER_SERVICE_ID }}"
            exit 1
          else
            echo "Deployment POST response:$POST_RESPONSE"
          fi

      # 最大180回の反復を設定
      # Render API からデプロイ情報を取得
      # 変数GET_DEPROY_RESPONSE が空ではないか確認
      # レスポンス全体を表示してデバッグ情報を確認
      # 最新のデプロイ情報を取得
      # 変数LATEST_DEPLOY が空ではないか確認
      # デプロイID を取得
      # 変数RENDER_DEPLOY_ID が空ではないか確認
      # 変数RENDER_DEPLOY_ID を GITHUB_ENV に格納
      # デプロイステータスを取得
      # 変数RENDER_DEPLOY_STATUS が空でないか確認
      # ステータスを判定
      # 10秒待機しステータスの判定を反復
      - name: Check Render Deployment Status
        run: |
          set -e

          for i in {1..180}; do

            GET_DEPLOY_RESPONSE=$(curl -X GET \
            "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" --fail --show-error)

            if [[ -z "$GET_DEPLOY_RESPONSE" ]]; then
              echo "Failed to retrieve deployment information"
              exit 1
            fi

            echo "$GET_DEPLOY_RESPONSE" | jq '.'

            LATEST_DEPLOY=$(echo "$GET_DEPLOY_RESPONSE" | jq -r 'map(.deploy) | sort_by(.createdAt) | last')

            if [[ -z "$LATEST_DEPLOY" ]]; then
              echo "Failed to retrieve the latest deploy"
              exit 1
            fi

            RENDER_DEPLOY_ID=$(echo "$LATEST_DEPLOY" | jq -r '.id')
            if [[ -z "$RENDER_DEPLOY_ID" ]]; then
              echo "Failed to extract deployment details"
              exit 1
            else
              echo "Render Deploy ID: $RENDER_DEPLOY_ID"
              echo "RENDER_DEPLOY_ID=$RENDER_DEPLOY_ID" >> $GITHUB_ENV
            fi

            RENDER_DEPLOY_STATUS=$(echo "$LATEST_DEPLOY" | jq -r '.status')
            if [[ -z "$RENDER_DEPLOY_STATUS" ]]; then
              echo "Failed to retrieve deployment status"
              exit 1
            elif [[ "$RENDER_DEPLOY_STATUS" == "build_failed" ]]; then
              echo "Deployment build_failed!"
              exit 1
            elif [[ "$RENDER_DEPLOY_STATUS" == "update_failed" ]]; then
              echo "Deployment update_failed!"
              exit 1
            elif [[ "$RENDER_DEPLOY_STATUS" == "canceled" ]]; then
              echo "Deployment canceled!"
              exit 1
            elif [[ "$RENDER_DEPLOY_STATUS" == "live" ]]; then
              echo "Deployment live!"
              exit 0
            fi

            sleep 10
          done

          echo "Deployment is still in progress after 30 minutes. Exiting."
          echo "Final Deployment Status: $RENDER_DEPLOY_STATUS"
          exit 1

      # Render の PostgreSQL に初期データを挿入
      # Render APIからマイグレーションデータを取得
      # 変数MIGRATION_JOB_RESPONSE が空ではないか確認
      # マイグレーションID を取得
      # 変数MIGRATION_ID が空ではないか確認
      # 最大180回をマイグレーションID情報の取得を反復
      # Render API からマイグレーションID情報を取得
      # 変数MIGRATION_ID_RESPONSE が空ではないか確認
      # マイグレーションステータスを取得
      # マイグレーションステータスを判定
      # 10秒待機しステータスの判定を反復
      - name: Run Database Migration on Render
        run: |
          MIGRATION_JOB_RESPONSE=$(curl -X POST \
            "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/jobs" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" --fail --show-error\
            -d '{
              "startCommand": "bundle exec rails db:migrate"
            }')

          if [[ -z "$MIGRATION_JOB_RESPONSE" ]]; then
            echo "Failed to retrieve creating migration job information"
            exit 1
          fi

          echo "$MIGRATION_JOB_RESPONSE" | jq '.'

          MIGRATION_ID=$(echo "$MIGRATION_JOB_RESPONSE" | jq -r '.id')

          if [[ -z "$MIGRATION_ID" ]]; then
            echo "Failed to retrieve migration-id information"
            exit 1
          fi

          echo "$MIGRATION_ID"

          for i in {1..180}; do
            MIGRATION_ID_RESPONSE=$(curl -X GET \
              "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/jobs/$MIGRATION_ID" \
              -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
              -H "Content-Type: application/json" --fail --show-error)

            if [[ -z "$MIGRATION_ID_RESPONSE" ]]; then
              echo "Failed to retrieve running migration information"
              exit 1
            fi

            echo "$MIGRATION_ID_RESPONSE" | jq '.'

            MIGRATION_STATUS=$(echo "$MIGRATION_ID_RESPONSE" | jq -r '.status')

            if [[ "$MIGRATION_STATUS" == "succeeded" ]]; then
              echo "Migration succeeded"
              exit 0
            elif [[ "$MIGRATION_STATUS" == "failed" ]]; then
              echo "Migration failed"
              exit 1
            else
              echo "Waiting for migration to complete... (attempt $i/180)"
              sleep 10
            fi
          done

          echo "Migration is still in progress after 30 minutes. Exiting."
          echo "Final migration Status: $MIGRATION_STATUS"
          exit 1

      # Render の PostgreSQL に初期データを挿入
      # Render APIからシードデータを取得
      # 変数SEED_JOB_RESPONSE が空ではないか確認
      # シードID を取得
      # 変数SEED_ID が空ではないか確認
      # 最大180回をシードID情報の取得を反復
      # Render API からシードID情報を取得
      # 変数SEED_ID_RESPONSE が空ではないか確認
      # シードステータスを取得
      # シードステータスを判定
      # 10秒待機しステータスの判定を反復
      - name: Run Database Seed on Render
        run: |
          SEED_JOB_RESPONSE=$(curl -X POST \
            "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/jobs" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" --fail --show-error\
            -d '{
              "startCommand": "bundle exec rails db:seed"
            }')

            if [[ -z "$SEED_JOB_RESPONSE" ]]; then
              echo "Failed to retrieve creating seed job information"
              exit 1
            fi

            echo "$SEED_JOB_RESPONSE" | jq '.'

          SEED_ID=$(echo "$SEED_JOB_RESPONSE" | jq -r '.id')

          if [[ -z "$SEED_ID" ]]; then
            echo "Failed to retrieve seed-id information"
            exit 1
          fi

          echo "$SEED_ID"

          for i in {1..180}; do
            SEED_ID_RESPONSE=$(curl -X GET \
              "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/jobs/$SEED_ID" \
              -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
              -H "Content-Type: application/json" --fail --show-error)

            if [[ -z "$SEED_ID_RESPONSE" ]]; then
              echo "Failed to retrieve running seed information"
              exit 1
            fi

            echo "$SEED_ID_RESPONSE" | jq '.'

            SEED_STATUS=$(echo "$SEED_ID_RESPONSE" | jq -r '.status')

            if [[ "$SEED_STATUS" == "succeeded" ]]; then
              echo "Seed succeeded"
              exit 0
            elif [[ "$SEED_STATUS" == "failed" ]]; then
              echo "Seed failed"
              exit 1
            else
              echo "Waiting for seed to complete... (attempt $i/180)"
              sleep 10
            fi
          done

          echo "Seed is still in progress after 30 minutes. Exiting."
          echo "Final Seed Status: $SEED_STATUS"
          exit 1
